var N = Object.defineProperty;
var _ = (r, e, t) => e in r ? N(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var d = (r, e, t) => _(r, typeof e != "symbol" ? e + "" : e, t);
const I = "%[a-f0-9]{2}", b = new RegExp("(" + I + ")|([^%]+?)", "gi"), w = new RegExp("(" + I + ")+", "gi");
function m(r, e) {
  try {
    return [decodeURIComponent(r.join(""))];
  } catch {
  }
  if (r.length === 1)
    return r;
  e = e || 1;
  const t = r.slice(0, e), n = r.slice(e);
  return Array.prototype.concat.call([], m(t), m(n));
}
function q(r) {
  try {
    return decodeURIComponent(r);
  } catch {
    let e = r.match(b) || [];
    for (let t = 1; t < e.length; t++)
      r = m(e, t).join(""), e = r.match(b) || [];
    return r;
  }
}
function D(r) {
  const e = {
    "%FE%FF": "��",
    "%FF%FE": "��"
  };
  let t = w.exec(r);
  for (; t; ) {
    try {
      e[t[0]] = decodeURIComponent(t[0]);
    } catch {
      const i = q(t[0]);
      i !== t[0] && (e[t[0]] = i);
    }
    t = w.exec(r);
  }
  e["%C2"] = "�";
  const n = Object.keys(e);
  for (const i of n)
    r = r.replace(new RegExp(i, "g"), e[i]);
  return r;
}
function R(r) {
  if (typeof r != "string")
    throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof r + "`");
  try {
    return decodeURIComponent(r);
  } catch {
    return D(r);
  }
}
function E(r, e) {
  if (!(typeof r == "string" && typeof e == "string"))
    throw new TypeError("Expected the arguments to be of type `string`");
  if (r === "" || e === "")
    return [];
  const t = r.indexOf(e);
  return t === -1 ? [] : [
    r.slice(0, t),
    r.slice(t + e.length)
  ];
}
function H(r, e) {
  const t = {};
  if (Array.isArray(e))
    for (const n of e) {
      const i = Object.getOwnPropertyDescriptor(r, n);
      i != null && i.enumerable && Object.defineProperty(t, n, i);
    }
  else
    for (const n of Reflect.ownKeys(r)) {
      const i = Object.getOwnPropertyDescriptor(r, n);
      if (i.enumerable) {
        const a = r[n];
        e(n, a, r) && Object.defineProperty(t, n, i);
      }
    }
  return t;
}
const L = (r) => r == null, P = (r) => encodeURIComponent(r).replaceAll(/[!'()*]/g, (e) => `%${e.charCodeAt(0).toString(16).toUpperCase()}`), y = Symbol("encodeFragmentIdentifier");
function V(r) {
  switch (r.arrayFormat) {
    case "index":
      return (e) => (t, n) => {
        const i = t.length;
        return n === void 0 || r.skipNull && n === null || r.skipEmptyString && n === "" ? t : n === null ? [
          ...t,
          [c(e, r), "[", i, "]"].join("")
        ] : [
          ...t,
          [c(e, r), "[", c(i, r), "]=", c(n, r)].join("")
        ];
      };
    case "bracket":
      return (e) => (t, n) => n === void 0 || r.skipNull && n === null || r.skipEmptyString && n === "" ? t : n === null ? [
        ...t,
        [c(e, r), "[]"].join("")
      ] : [
        ...t,
        [c(e, r), "[]=", c(n, r)].join("")
      ];
    case "colon-list-separator":
      return (e) => (t, n) => n === void 0 || r.skipNull && n === null || r.skipEmptyString && n === "" ? t : n === null ? [
        ...t,
        [c(e, r), ":list="].join("")
      ] : [
        ...t,
        [c(e, r), ":list=", c(n, r)].join("")
      ];
    case "comma":
    case "separator":
    case "bracket-separator": {
      const e = r.arrayFormat === "bracket-separator" ? "[]=" : "=";
      return (t) => (n, i) => i === void 0 || r.skipNull && i === null || r.skipEmptyString && i === "" ? n : (i = i === null ? "" : i, n.length === 0 ? [[c(t, r), e, c(i, r)].join("")] : [[n, c(i, r)].join(r.arrayFormatSeparator)]);
    }
    default:
      return (e) => (t, n) => n === void 0 || r.skipNull && n === null || r.skipEmptyString && n === "" ? t : n === null ? [
        ...t,
        c(e, r)
      ] : [
        ...t,
        [c(e, r), "=", c(n, r)].join("")
      ];
  }
}
function k(r) {
  let e;
  switch (r.arrayFormat) {
    case "index":
      return (t, n, i) => {
        if (e = /\[(\d*)]$/.exec(t), t = t.replace(/\[\d*]$/, ""), !e) {
          i[t] = n;
          return;
        }
        i[t] === void 0 && (i[t] = {}), i[t][e[1]] = n;
      };
    case "bracket":
      return (t, n, i) => {
        if (e = /(\[])$/.exec(t), t = t.replace(/\[]$/, ""), !e) {
          i[t] = n;
          return;
        }
        if (i[t] === void 0) {
          i[t] = [n];
          return;
        }
        i[t] = [...i[t], n];
      };
    case "colon-list-separator":
      return (t, n, i) => {
        if (e = /(:list)$/.exec(t), t = t.replace(/:list$/, ""), !e) {
          i[t] = n;
          return;
        }
        if (i[t] === void 0) {
          i[t] = [n];
          return;
        }
        i[t] = [...i[t], n];
      };
    case "comma":
    case "separator":
      return (t, n, i) => {
        const a = typeof n == "string" && n.includes(r.arrayFormatSeparator), s = typeof n == "string" && !a && o(n, r).includes(r.arrayFormatSeparator);
        n = s ? o(n, r) : n;
        const f = a || s ? n.split(r.arrayFormatSeparator).map((u) => o(u, r)) : n === null ? n : o(n, r);
        i[t] = f;
      };
    case "bracket-separator":
      return (t, n, i) => {
        const a = /(\[])$/.test(t);
        if (t = t.replace(/\[]$/, ""), !a) {
          i[t] = n && o(n, r);
          return;
        }
        const s = n === null ? [] : n.split(r.arrayFormatSeparator).map((f) => o(f, r));
        if (i[t] === void 0) {
          i[t] = s;
          return;
        }
        i[t] = [...i[t], ...s];
      };
    default:
      return (t, n, i) => {
        if (i[t] === void 0) {
          i[t] = n;
          return;
        }
        i[t] = [...[i[t]].flat(), n];
      };
  }
}
function O(r) {
  if (typeof r != "string" || r.length !== 1)
    throw new TypeError("arrayFormatSeparator must be single character string");
}
function c(r, e) {
  return e.encode ? e.strict ? P(r) : encodeURIComponent(r) : r;
}
function o(r, e) {
  return e.decode ? R(r) : r;
}
function M(r) {
  return Array.isArray(r) ? r.sort() : typeof r == "object" ? M(Object.keys(r)).sort((e, t) => Number(e) - Number(t)).map((e) => r[e]) : r;
}
function x(r) {
  const e = r.indexOf("#");
  return e !== -1 && (r = r.slice(0, e)), r;
}
function T(r) {
  let e = "";
  const t = r.indexOf("#");
  return t !== -1 && (e = r.slice(t)), e;
}
function S(r, e) {
  return e.parseNumbers && !Number.isNaN(Number(r)) && typeof r == "string" && r.trim() !== "" ? r = Number(r) : e.parseBooleans && r !== null && (r.toLowerCase() === "true" || r.toLowerCase() === "false") && (r = r.toLowerCase() === "true"), r;
}
function g(r) {
  r = x(r);
  const e = r.indexOf("?");
  return e === -1 ? "" : r.slice(e + 1);
}
function F(r, e) {
  e = {
    decode: !0,
    sort: !0,
    arrayFormat: "none",
    arrayFormatSeparator: ",",
    parseNumbers: !1,
    parseBooleans: !1,
    ...e
  }, O(e.arrayFormatSeparator);
  const t = k(e), n = /* @__PURE__ */ Object.create(null);
  if (typeof r != "string" || (r = r.trim().replace(/^[?#&]/, ""), !r))
    return n;
  for (const i of r.split("&")) {
    if (i === "")
      continue;
    const a = e.decode ? i.replaceAll("+", " ") : i;
    let [s, f] = E(a, "=");
    s === void 0 && (s = a), f = f === void 0 ? null : ["comma", "separator", "bracket-separator"].includes(e.arrayFormat) ? f : o(f, e), t(o(s, e), f, n);
  }
  for (const [i, a] of Object.entries(n))
    if (typeof a == "object" && a !== null)
      for (const [s, f] of Object.entries(a))
        a[s] = S(f, e);
    else
      n[i] = S(a, e);
  return e.sort === !1 ? n : (e.sort === !0 ? Object.keys(n).sort() : Object.keys(n).sort(e.sort)).reduce((i, a) => {
    const s = n[a];
    return i[a] = s && typeof s == "object" && !Array.isArray(s) ? M(s) : s, i;
  }, /* @__PURE__ */ Object.create(null));
}
function A(r, e) {
  if (!r)
    return "";
  e = {
    encode: !0,
    strict: !0,
    arrayFormat: "none",
    arrayFormatSeparator: ",",
    ...e
  }, O(e.arrayFormatSeparator);
  const t = (s) => e.skipNull && L(r[s]) || e.skipEmptyString && r[s] === "", n = V(e), i = {};
  for (const [s, f] of Object.entries(r))
    t(s) || (i[s] = f);
  const a = Object.keys(i);
  return e.sort !== !1 && a.sort(e.sort), a.map((s) => {
    const f = r[s];
    return f === void 0 ? "" : f === null ? c(s, e) : Array.isArray(f) ? f.length === 0 && e.arrayFormat === "bracket-separator" ? c(s, e) + "[]" : f.reduce(n(s), []).join("&") : c(s, e) + "=" + c(f, e);
  }).filter((s) => s.length > 0).join("&");
}
function j(r, e) {
  var i;
  e = {
    decode: !0,
    ...e
  };
  let [t, n] = E(r, "#");
  return t === void 0 && (t = r), {
    url: ((i = t == null ? void 0 : t.split("?")) == null ? void 0 : i[0]) ?? "",
    query: F(g(r), e),
    ...e && e.parseFragmentIdentifier && n ? { fragmentIdentifier: o(n, e) } : {}
  };
}
function $(r, e) {
  e = {
    encode: !0,
    strict: !0,
    [y]: !0,
    ...e
  };
  const t = x(r.url).split("?")[0] || "", n = g(r.url), i = {
    ...F(n, { sort: !1 }),
    ...r.query
  };
  let a = A(i, e);
  a && (a = `?${a}`);
  let s = T(r.url);
  if (typeof r.fragmentIdentifier == "string") {
    const f = new URL(t);
    f.hash = r.fragmentIdentifier, s = e[y] ? f.hash : `#${r.fragmentIdentifier}`;
  }
  return `${t}${a}${s}`;
}
function C(r, e, t) {
  t = {
    parseFragmentIdentifier: !0,
    [y]: !1,
    ...t
  };
  const { url: n, query: i, fragmentIdentifier: a } = j(r, t);
  return $({
    url: n,
    query: H(i, e),
    fragmentIdentifier: a
  }, t);
}
function W(r, e, t) {
  const n = Array.isArray(e) ? (i) => !e.includes(i) : (i, a) => !e(i, a);
  return C(r, n, t);
}
const K = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  exclude: W,
  extract: g,
  parse: F,
  parseUrl: j,
  pick: C,
  stringify: A,
  stringifyUrl: $
}, Symbol.toStringTag, { value: "Module" })), l = "https://docmee.cn", h = {
  dashboard: `${l}/sdk-ui/dashboard`,
  editor: `${l}/sdk-ui/editor`,
  creator: `${l}/sdk-ui/creator/0`
};
class B {
  /**
   *
   * @param {DocmeeUIConstructorOptions} options
   */
  constructor({
    token: e,
    page: t = "dashboard",
    container: n,
    pptId: i,
    onMessage: a,
    ...s
  }) {
    d(this, "docmeeHref", h.dashboard);
    d(this, "query", { iframe: "1" });
    d(this, "iframe", null);
    d(this, "onMessage", () => Promise.resolve(!0));
    d(this, "iframeMounted", !1);
    d(this, "initInterval", null);
    this.onMessage = a, this.container = n, location.protocol.startsWith("file") && console.log(
      "%c %s",
      "color: red; background-color: #f7c600",
      "🔴 不能在file协议下运行，请启动一个http服务来运行！ 🔴 "
    ), e && this.init({ token: e, page: t, pptId: i, ...s });
  }
  _postMessage(e) {
    var t, n;
    if (!this.iframe.contentWindow) throw new Error("iframe未挂载！");
    (n = (t = this.iframe) == null ? void 0 : t.contentWindow) == null || n.postMessage(e, this.docmeeHref);
  }
  init({ token: e, page: t = "dashboard", ...n }) {
    if (t === "editor" && !n.pptId)
      throw new Error("初始化editor页面时，必须传入pptId");
    this.query = Object.assign({}, this.query, n), this.docmeeHref = h[t], this.updateToken(e), this._initIframe(!0);
  }
  // 初始化iframe
  _initIframe(e) {
    const t = this.container, n = document.createElement("iframe"), i = location.href, a = K.stringifyUrl({
      url: this.docmeeHref,
      query: e ? { iframe: 1, targetOrigin: i } : this.query
    });
    n.src = a, n.style.width = "100%", n.style.height = "100%", n.style.border = "0", n.style.outline = "none", n.style.padding = "0px", n.setAttribute("allowfullscreen", "true"), this.iframe = n, this.iframeMounted = !1, t.innerHTML = "", t.appendChild(n), this.iframe.addEventListener("load", () => {
      setTimeout(() => {
        this.iframeMounted || (this.initInterval = setInterval(() => {
          if (this.iframeMounted)
            return clearInterval(this.initInterval);
          e && this._postMessage({
            type: "transParams",
            data: this.query
          });
        }, 200));
      }, 300), window.addEventListener("message", async (s) => {
        var u, p;
        if (s.source !== this.iframe.contentWindow) return;
        const f = s.data;
        if (e && f.type === "mounted" && (this.iframeMounted = !0, this._postMessage({
          type: "transParams",
          data: this.query
        })), f.type === "user-info" && (this.iframeMounted = !0), f.type === "beforeGenerate" || f.type === "beforeDownload") {
          const U = await ((u = this.onMessage) == null ? void 0 : u.call(this, f));
          this._postMessage({ data: U, type: `recover_${f.type}` });
        } else
          (p = this.onMessage) == null || p.call(this, f);
      });
    });
  }
  /**
   * 更新用户token
   * @param {string} latestToken 新的token
   */
  updateToken(e) {
    if (!/(a|s)k_.+/.test(e)) throw new Error("token 错误！");
    this.token = e, this.query.token = e, this.iframeMounted && this._postMessage({
      type: "transParams",
      data: {
        token: e
      }
    });
  }
  /**
   * 卸载iframe
   */
  destroy() {
    this.container.innerHTML = "";
  }
  /**
   * 发送消息
   * @param {{type: 'warning' | 'success' | 'error' | 'info', content: string}}
   */
  sendMessage(e) {
    this._postMessage({ type: "message", data: e });
  }
  getInfo() {
    this._postMessage({ type: "getInfo" });
  }
  navigate({ page: e, pptId: t }) {
    if (!h[e]) throw new Error(`页面${e} 不存在`);
    this.init({ page: e, token: this.token, pptId: t });
  }
}
window.DocmeeUI = B;
